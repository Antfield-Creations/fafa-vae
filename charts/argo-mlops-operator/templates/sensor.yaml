{{- range $namespace := .Values.customResourceDefinition.namespaces }}
---
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: {{ $.Values.customResourceDefinition.kind | lower }}-sensor
  namespace: {{ $namespace }}
spec:
  eventBusName: {{ $.Values.eventBus.name }}
  template:
    serviceAccountName: {{ $.Values.customResourceDefinition.serviceAccount.name }}
  dependencies:
    - name: source-dependency
      # References the metadata.name in the event source
      eventSourceName: {{ $.Values.customResourceDefinition.kind | lower }}-source
      # References the key directly under "resource:" in the event source
      eventName: {{ $.Values.customResourceDefinition.kind | lower }}
  triggers:
    - template:
        name: argo-mlops-trigger
        argoWorkflow:
          operation: submit
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: process-{{ $.Values.customResourceDefinition.kind | lower }}-
              spec:
                serviceAccountName: {{ $.Values.customResourceDefinition.serviceAccount.workflowServiceAccountName }}
                entrypoint: deploy
                arguments:
                  parameters:
                    # the values will get overridden by event payload from below
                    - name: mlops-manifest
                      value: ""
                templates:
                  - name: deploy
                    steps:
                      - - name: validate-gpu
                          script:
                            image: tensorflow/tensorflow:2.7.1-gpu
                            command: [ python ]
                            source: |
                              import tensorflow as tf
                              devices = tf.config.list_physical_devices('GPU')

                              if len(devices) == 0:
                                raise RuntimeError('No GPUs found')

                              for device in devices:
                                print(device)

                      - - name: call-template
                          templateRef:
                            {{- $.Values.templateRef | toYaml | nindent 28 }}

          parameters:
            - src:
                dependencyName: source-dependency
                dataKey: body
              dest: spec.arguments.parameters.0.value
{{- end }}
