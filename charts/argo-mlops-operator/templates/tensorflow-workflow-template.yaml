{{- range $namespace := .Values.customResourceDefinition.namespaces }}
---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: tensorflow-workflow-template
  namespace: {{ $namespace }}
  generateName: tensorflow-check-
spec:
  serviceAccountName: argo-workflow
  tolerations:
    - key: nvidia.com/gpu
      value: present
      effect: NoSchedule
  nodeSelector:
    cloud.google.com/gke-nodepool: gpu-pool

  entrypoint: main

  arguments:
    parameters:
      # Injected by Sensor workflow
      - name: mlops-manifest
        # Sets a compact default which we can test-run in Argo UI
        default: |
          { "apiVersion": "api.antfield.nl/v1alpha1", "kind": "ArgoMLOps",
            "metadata": { "name": "mlops-test", "namespace": "data" },
            "spec": {
              "image": "python3.10:minimal",
              "repository": "https://github.com/Antfield-Creations/fafa-vae",
              "command": "python3 --version"
          } }

  templates:
    - name: main
      container:
        resources:
          limits:
            nvidia.com/gpu: "1"
        image: tensorflow/tensorflow:2.7.1-gpu
        command:
          - bash
          - -eux
          - -c
        args:
          - |
            python -m pip install pipenv
            curl -fsSLO https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 -o /usr/bin/jq
            chmod +x /usr/bin/jq
            mkdir script
            cd script
            echo {{`{{workflow.parameters.mlops-manifest}}`}} > config.json
            # Clone into current directory
            git clone $(jq .spec.repository config.json) .
            pipenv install --deploy
            eval $(jq .spec.command config.json)
{{- end }}
