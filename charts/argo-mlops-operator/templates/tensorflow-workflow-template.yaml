{{- range $namespace := .Values.customResourceDefinition.namespaces }}
---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: tensorflow-workflow-template
  namespace: {{ $namespace }}
  generateName: tensorflow-check-
spec:
  serviceAccountName: argo-workflow
  tolerations:
    - key: nvidia.com/gpu
      value: present
      effect: NoSchedule
  nodeSelector:
    cloud.google.com/gke-nodepool: gpu-pool

  entrypoint: main

  arguments:
    parameters:
      # Injected by Sensor workflow
      - name: mlops-manifest
        # Sets a compact default which we can test-run in Argo UI
        default: |
          { "apiVersion": "api.antfield.nl/v1alpha1", "kind": "ArgoMLOps",
            "metadata": { "name": "mlops-test", "namespace": "data" },
            "spec": {
              "image": "python3.10:minimal",
              "repository": "https://github.com/Antfield-Creations/fafa-vae",
              "command": "python3 --version"
          } }

  templates:
    - name: main
      volumes:
        - name: manifest
          configMap:
            name: "{{ $.Values.customResourceDefinition.manifestConfigMap.name }}"
            items:
              - key: config.json
                path: config.json
      container:
        resources:
          limits:
            nvidia.com/gpu: "1"
        image: tensorflow/tensorflow:2.8.0-gpu
        volumeMounts:
          - name: manifest
            mountPath: /opt/manifest
        command:
          - bash
          - -c
        args:
          - |
            set -eux pipefail

            # Install json cli parser
            curl -fsSL https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 -o /usr/bin/jq
            chmod +x /usr/bin/jq

            # Install Git
            rm /etc/apt/sources.list.d/cuda.list
            rm /etc/apt/sources.list.d/nvidia-ml.list
            apt-key del 7fa2af80
            curl -fsSLO https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-keyring_1.0-1_all.deb
            dpkg -i cuda-keyring_1.0-1_all.deb
            apt-get update
            apt-get install -y git

            # Clone into current directory
            mkdir script
            cd script
            git clone $(jq -r .spec.repository /opt/manifest/config.json) .

            # Write script config overrides to config.yaml
            cp /opt/manifest/config.json ./config.json
            echo config.json

            # install and run main script
            pip3 install pipenv
            export PYENV_ROOT="$HOME/.pyenv"
            curl https://pyenv.run | bash
            command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
            eval "$(pyenv init -)"
            pipenv --python 3.9 install --deploy
            eval $(jq .spec.command config.json)
{{- end }}
